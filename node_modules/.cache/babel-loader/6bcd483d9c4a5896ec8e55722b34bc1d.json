{"ast":null,"code":"'use strict';\n/**\n *   Copyright 2013 Vimeo\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\n\nvar qsModule = require('querystring');\n\nvar urlModule = require('url');\n\nvar httpModule = require('http');\n\nvar httpsModule = require('https');\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar tus = require('tus-js-client');\n\nmodule.exports.request_defaults = {\n  protocol: 'https:',\n  hostname: 'api.vimeo.com',\n  port: 443,\n  method: 'GET',\n  query: {},\n  headers: {\n    Accept: 'application/vnd.vimeo.*+json;version=3.4',\n    'User-Agent': 'Vimeo.js/2.1.0'\n  }\n};\nvar authEndpoints = module.exports.authEndpoints = {\n  authorization: '/oauth/authorize',\n  accessToken: '/oauth/access_token',\n  clientCredentials: '/oauth/authorize/client'\n  /**\n   * This object is used to interface with the Vimeo API.\n   *\n   * @param {string} clientId     OAuth 2 Client Identifier\n   * @param {string} clientSecret OAuth 2 Client Secret\n   * @param {string} accessToken  OAuth 2 Optional pre-authorized access token\n   */\n\n};\n\nvar Vimeo = module.exports.Vimeo = function Vimeo(clientId, clientSecret, accessToken) {\n  this._clientId = clientId;\n  this._clientSecret = clientSecret;\n\n  if (accessToken) {\n    this._accessToken = accessToken;\n  }\n};\n\nVimeo.prototype._clientId = null;\nVimeo.prototype._clientSecret = null;\nVimeo.prototype._accessToken = null;\n/**\n * Performs an API call.\n *\n * Can be called one of two ways:\n *\n * 1. Url + Callback\n *    If a url is provided, we fill in the rest of the request options with defaults\n *    (GET http://api.vimeo.com/{url}).\n *\n * 2. Options + callback\n *    If an object is provided, it should match the response of urlModule.parse. Path is the only\n *    required parameter.\n *\n *    - hostname\n *    - port\n *    - query (will be applied to the url if GET, request body if POST)\n *    - headers\n *    - path (can include a querystring)\n *    - method\n *\n * The callback takes two parameters, `err` and `json`.\n * If an error has occured, your callback will be called as `callback(err)`;\n * If an error has not occured, your callback will be called as `callback(null, json)`;\n *\n * @param {string|Object} options   String path (default GET), or object with `method`, path`,\n *                                  `host`, `port`, `query` or `headers`.\n * @param {Function}      callback  Called when complete, `function (err, json)`.\n */\n\nVimeo.prototype.request = function (options, callback) {\n  var client = null; // If a URL was provided, build an options object.\n\n  if (typeof options === 'string') {\n    options = urlModule.parse(options, true);\n    options.method = 'GET';\n  } // If we don't have a path at this point, error. a path is the only required field. We have\n  // defaults for everything else important.\n\n\n  if (typeof options.path !== 'string') {\n    return callback(new Error('You must provide an API path.'));\n  } // Add leading slash to path if missing\n\n\n  if (options.path.charAt(0) !== '/') {\n    options.path = '/' + options.path;\n  } // Turn the provided options into options that are valid for `client.request`.\n\n\n  var requestOptions = this._buildRequestOptions(options);\n\n  client = requestOptions.protocol === 'https:' ? httpsModule : httpModule;\n\n  if (['POST', 'PATCH', 'PUT', 'DELETE'].indexOf(requestOptions.method) !== -1) {\n    if (requestOptions.headers['Content-Type'] === 'application/json') {\n      requestOptions.body = JSON.stringify(options.query);\n    } else {\n      requestOptions.body = qsModule.stringify(options.query);\n    }\n\n    if (requestOptions.body) {\n      requestOptions.headers['Content-Length'] = Buffer.byteLength(requestOptions.body, 'utf8');\n    } else {\n      requestOptions.headers['Content-Length'] = 0;\n    }\n  } // Perform the Vimeo API request\n\n\n  var req = client.request(requestOptions, this._handleRequest(callback));\n\n  if (requestOptions.body) {\n    req.write(requestOptions.body);\n  }\n\n  req.on('error', function (e) {\n    callback(e);\n  });\n  req.end();\n};\n/**\n * Creates the standard request handler for http requests\n *\n * @param  {Function} callback\n * @return {Function}\n */\n\n\nVimeo.prototype._handleRequest = function (callback) {\n  return function (res) {\n    res.setEncoding('utf8');\n    var buffer = '';\n    res.on('readable', function () {\n      buffer += res.read() || '';\n    });\n\n    if (res.statusCode >= 400) {\n      // Failed api calls should wait for the response to end and then call the callback with an\n      // error.\n      res.on('end', function () {\n        var err = new Error(buffer);\n        callback(err, buffer, res.statusCode, res.headers);\n      });\n    } else {\n      // Successful api calls should wait for the response to end and then call the callback with\n      // the response body.\n      res.on('end', function () {\n        try {\n          var body = buffer.length ? JSON.parse(buffer) : {};\n        } catch (e) {\n          return callback(buffer, buffer, res.statusCode, res.headers);\n        }\n\n        callback(null, body, res.statusCode, res.headers);\n      });\n    }\n  };\n};\n/**\n * Merge the request options defaults into the request options\n *\n * @param  {Object} options\n * @return {Object}\n */\n\n\nVimeo.prototype._buildRequestOptions = function (options) {\n  // Set up the request object. we always use the options paramter first, and if no value is\n  // provided we fall back to request defaults.\n  var requestOptions = this._applyDefaultRequestOptions(options);\n\n  if (this._accessToken) {\n    requestOptions.headers.Authorization = 'Bearer ' + this._accessToken;\n  } else if (this._clientId && this._clientSecret) {\n    var basicToken = Buffer.from(this._clientId + ':' + this._clientSecret);\n    requestOptions.headers.Authorization = 'Basic ' + basicToken.toString('base64');\n  }\n\n  if (['POST', 'PATCH', 'PUT', 'DELETE'].indexOf(requestOptions.method) !== -1 && !requestOptions.headers['Content-Type']) {\n    // Set proper headers for POST, PATCH and PUT bodies.\n    requestOptions.headers['Content-Type'] = 'application/json';\n  } else if (requestOptions.method === 'GET') {\n    // Apply parameters to the URL for GET requests.\n    requestOptions.path = this._applyQuerystringParams(requestOptions, options);\n  }\n\n  return requestOptions;\n};\n/**\n * Create an object of request options based on the provided list of options, and the request\n * defaults.\n *\n * @param  {Object} options\n * @return {Object}\n */\n\n\nVimeo.prototype._applyDefaultRequestOptions = function (options) {\n  var requestOptions = {\n    protocol: options.protocol || module.exports.request_defaults.protocol,\n    host: options.hostname || module.exports.request_defaults.hostname,\n    port: options.port || module.exports.request_defaults.port,\n    method: options.method || module.exports.request_defaults.method,\n    headers: options.headers || {},\n    body: '',\n    path: options.path\n  };\n  var key = null; // Apply the default headers\n\n  if (module.exports.request_defaults.headers) {\n    for (key in module.exports.request_defaults.headers) {\n      if (!requestOptions.headers[key]) {\n        requestOptions.headers[key] = module.exports.request_defaults.headers[key];\n      }\n    }\n  }\n\n  return requestOptions;\n};\n/**\n * Apply the query parameter onto the final request URL.\n *\n * @param  {Object} requestOptions\n * @param  {Object} options\n * @return {string}\n */\n\n\nVimeo.prototype._applyQuerystringParams = function (requestOptions, options) {\n  var querystring = '';\n\n  if (!options.query) {\n    return requestOptions.path;\n  } // If we have parameters, apply them to the URL.\n\n\n  if (Object.keys(options.query).length) {\n    if (requestOptions.path.indexOf('?') < 0) {\n      // If the existing path does not contain any parameters, apply them as the only options.\n      querystring = '?' + qsModule.stringify(options.query);\n    } else {\n      // If the user already added parameters to the URL, we want to add them as additional\n      // parameters.\n      querystring = '&' + qsModule.stringify(options.query);\n    }\n  }\n\n  return requestOptions.path + querystring;\n};\n/**\n * Set a user access token to be used with library requests.\n *\n * @param {string} accessToken\n */\n\n\nVimeo.prototype.setAccessToken = function (accessToken) {\n  this._accessToken = accessToken;\n};\n/**\n * Exchange a code for an access token. This code should exist on your `redirectUri`.\n *\n * @param {string}   code         The code provided on your `redirectUri`.\n * @param {string}   redirectUri  The exact `redirectUri` provided to `buildAuthorizationEndpoint`\n *                                and configured in your API app settings.\n * @param {Function} fn           Callback to execute on completion.\n */\n\n\nVimeo.prototype.accessToken = function (code, redirectUri, fn) {\n  var options = {\n    method: 'POST',\n    hostname: module.exports.request_defaults.hostname,\n    path: authEndpoints.accessToken,\n    query: {\n      grant_type: 'authorization_code',\n      code: code,\n      redirect_uri: redirectUri\n    },\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  };\n  this.request(options, function (err, body, status, headers) {\n    if (err) {\n      return fn(err, null, status, headers);\n    } else {\n      fn(null, body, status, headers);\n    }\n  });\n};\n/**\n * The first step of the authorization process.\n *\n * This function returns a URL, which the user should be sent to (via redirect or link).\n *\n * The destination allows the user to accept or deny connecting with vimeo, and accept or deny each\n * of the scopes you requested. Scopes are passed through the second parameter as an array of\n * strings, or a space delimited list.\n *\n * Once accepted or denied, the user is redirected back to the `redirectUri`.\n *\n * @param  {string} redirectUri   The URI that will exchange a code for an access token. Must match\n *                                the URI in your API app settings.\n * @param  {string} scope         An array of scopes. See https://developer.vimeo.com/api/authentication#scopes\n *                                for more.\n * @param  {string} state         A unique state that will be returned to you on your redirect URI.\n */\n\n\nVimeo.prototype.buildAuthorizationEndpoint = function (redirectUri, scope, state) {\n  var query = {\n    response_type: 'code',\n    client_id: this._clientId,\n    redirect_uri: redirectUri\n  };\n\n  if (scope) {\n    if (Array.isArray(scope)) {\n      query.scope = scope.join(' ');\n    } else {\n      query.scope = scope;\n    }\n  } else {\n    query.scope = 'public';\n  }\n\n  if (state) {\n    query.state = state;\n  }\n\n  return module.exports.request_defaults.protocol + '//' + module.exports.request_defaults.hostname + authEndpoints.authorization + '?' + qsModule.stringify(query);\n};\n/**\n * Generates an unauthenticated access token. This is necessary to make unauthenticated requests\n *\n * @param  {string}   scope An array of scopes. See https://developer.vimeo.com/api/authentication#scopes\n *                          for more.\n * @param  {Function} fn    A function that is called when the request is complete. If an error\n *                          occured the first parameter will be that error, otherwise the first\n *                          parameter will be null.\n */\n\n\nVimeo.prototype.generateClientCredentials = function (scope, fn) {\n  var query = {\n    grant_type: 'client_credentials'\n  };\n\n  if (scope) {\n    if (Array.isArray(scope)) {\n      query.scope = scope.join(' ');\n    } else {\n      query.scope = scope;\n    }\n  } else {\n    query.scope = 'public';\n  }\n\n  this.request({\n    method: 'POST',\n    hostname: module.exports.request_defaults.hostname,\n    path: authEndpoints.clientCredentials,\n    query: query,\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  }, function (err, body, status, headers) {\n    if (err) {\n      return fn(err, null, status, headers);\n    } else {\n      fn(null, body, status, headers);\n    }\n  });\n};\n/**\n * Upload a file.\n *\n * This should be used to upload a local file. If you want a form for your site to upload direct to\n * Vimeo, you should look at the `POST /me/videos` endpoint.\n *\n * https://developer.vimeo.com/api/endpoints/videos#POST/users/{user_id}/videos\n *\n * @param {string}    filePath          Path to the file you wish to upload.\n * @param {object=}   params            Parameters to send when creating a new video (name,\n *                                      privacy restrictions, etc.). See the API documentation for\n *                                      supported parameters.\n * @param {Function}  completeCallback  Callback to be executed when the upload completes.\n * @param {Function}  progressCallback  Callback to be executed when upload progress is updated.\n * @param {Function}  errorCallback     Callback to be executed when the upload returns an error.\n */\n\n\nVimeo.prototype.upload = function (filePath, params, completeCallback, progressCallback, errorCallback) {\n  var _self = this;\n\n  if (typeof params === 'function') {\n    errorCallback = progressCallback;\n    progressCallback = completeCallback;\n    completeCallback = params;\n    params = {};\n  }\n\n  try {\n    var fileSize = fs.statSync(filePath).size;\n  } catch (e) {\n    return errorCallback('Unable to locate file to upload.');\n  } // Ignore any specified upload approach and size.\n\n\n  if (typeof params.upload === 'undefined') {\n    params.upload = {\n      'approach': 'tus',\n      'size': fileSize\n    };\n  } else {\n    params.upload.approach = 'tus';\n    params.upload.size = fileSize;\n  }\n\n  var options = {\n    path: '/me/videos?fields=uri,name,upload',\n    method: 'POST',\n    query: params // Use JSON filtering so we only receive the data that we need to make an upload happen.\n\n  };\n  this.request(options, function (err, attempt, status) {\n    if (err) {\n      return errorCallback('Unable to initiate an upload. [' + err + ']');\n    }\n\n    _self._performTusUpload(filePath, fileSize, attempt, completeCallback, progressCallback, errorCallback);\n  });\n};\n/**\n * Replace the source of a single Vimeo video.\n *\n * https://developer.vimeo.com/api/endpoints/videos#POST/videos/{video_id}/versions\n *\n * @param {string}    filePath          Path to the file you wish to upload.\n * @param {string}    videoUri          Video URI of the video file to replace.\n * @param {object=}   params            Parameters to send when creating a new video (name,\n *                                      privacy restrictions, etc.). See the API documentation for\n *                                      supported parameters.\n * @param {Function}  completeCallback  Callback to be executed when the upload completes.\n * @param {Function}  progressCallback  Callback to be executed when upload progress is updated.\n * @param {Function}  errorCallback     Callback to be executed when the upload returns an error.\n */\n\n\nVimeo.prototype.replace = function (filePath, videoUri, params, completeCallback, progressCallback, errorCallback) {\n  var _self = this;\n\n  if (typeof params === 'function') {\n    errorCallback = progressCallback;\n    progressCallback = completeCallback;\n    completeCallback = params;\n    params = {};\n  }\n\n  try {\n    var fileSize = fs.statSync(filePath).size;\n  } catch (e) {\n    return errorCallback('Unable to locate file to upload.');\n  }\n\n  params.file_name = path.basename(filePath); // Ignore any specified upload approach and size.\n\n  if (typeof params.upload === 'undefined') {\n    params.upload = {\n      'approach': 'tus',\n      'size': fileSize\n    };\n  } else {\n    params.upload.approach = 'tus';\n    params.upload.size = fileSize;\n  }\n\n  var options = {\n    path: videoUri + '/versions?fields=upload',\n    method: 'POST',\n    query: params // Use JSON filtering so we only receive the data that we need to make an upload happen.\n\n  };\n\n  _self.request(options, function (err, attempt, status) {\n    if (err) {\n      return errorCallback('Unable to initiate an upload. [' + err + ']');\n    }\n\n    attempt.uri = videoUri;\n\n    _self._performTusUpload(filePath, fileSize, attempt, completeCallback, progressCallback, errorCallback);\n  });\n};\n/**\n * Take an upload attempt and perform the actual upload via tus.\n *\n * https://tus.io/\n *\n * @param {string}    filePath          Path to the file you wish to upload.\n * @param {integer}   fileSize          Size of the file that will be uploaded.\n * @param {Object}    attempt           Upload attempt data.\n * @param {Function}  completeCallback  Callback to be executed when the upload completes.\n * @param {Function}  progressCallback  Callback to be executed when the upload progress is updated.\n * @param {Function}  errorCallback     Callback to be executed when the upload returns an error.\n */\n\n\nVimeo.prototype._performTusUpload = function (filePath, fileSize, attempt, completeCallback, progressCallback, errorCallback) {\n  var file = fs.createReadStream(filePath);\n  var upload = new tus.Upload(file, {\n    endpoint: 'none',\n    uploadSize: fileSize,\n    retryDelays: [0, 1000, 3000, 5000],\n    onError: errorCallback,\n    onProgress: progressCallback,\n    onSuccess: function onSuccess() {\n      return completeCallback(attempt.uri);\n    }\n  });\n  upload.url = attempt.upload.upload_link;\n  upload.start();\n};","map":null,"metadata":{},"sourceType":"script"}